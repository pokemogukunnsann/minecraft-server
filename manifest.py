import json
import uuid

def generate_full_manifest(client_data: dict, rp_uuid: str = None, bp_uuid: str = None):
    """
    クライアントデータを受け取り、Minecraft Bedrock Editionの標準manifest.json形式に整形する。
    """
    
    # 1. 必須情報の取得とUUIDの生成 (カスタム生成しない場合も、パックがユニークである必要があります)
    #    NOTE: 実際には、クライアントが生成したUUIDをサーバーが検証する形も考えられますが、
    #          ここでは既存のUUIDを再利用するか、生成済みとして仮定します。
    #          **既存のパックを更新する**場合は、既存のUUIDを維持することが最も重要です。
    
    # 既存データがない、または新しいパックを生成/アップロードする場合のUUID
    header_uuid = str(uuid.uuid4())
    module_uuid = str(uuid.uuid4())
    print(f"New_Header_UUID:{header_uuid}")

    # 2. modules リストの構築
    modules = [
        {
            "type": client_data["pack_type"].lower(), # 'rp' -> 'resources', 'bp' -> 'data'
            "uuid": module_uuid,
            "version": [1, 0, 0]
        }
    ]
    
    # 3. dependencies リストの構築 (RPとBPを関連付けるために必要)
    dependencies = []
    if client_data["pack_type"] == "BP" and rp_uuid:
        dependencies.append({
            "uuid": rp_uuid,
            "version": [1, 0, 0]
        })
    elif client_data["pack_type"] == "RP" and bp_uuid:
        dependencies.append({
            "uuid": bp_uuid,
            "version": [1, 0, 0]
        })

    # 4. 最終的な manifest.json 構造の構築
    manifest = {
        "format_version": 2,
        "header": {
            "name": client_data.get("name", "Custom Pack"),
            "description": client_data.get("description", "A pack generated by the server."),
            "uuid": header_uuid, 
            "version": [1, 0, 0],
            "min_engine_version": [1, 16, 0]
        },
        "modules": modules
    }
    
    if dependencies:
        manifest["dependencies"] = dependencies

    return manifest

# --- 実行例 (カスタムBPを生成し、RP:AAAA-AAAA-AAAAに依存させる) ---
# 既存RPのUUIDを仮定
EXISTING_RP_UUID = "aaaaa-bbbbb-ccccc-ddddd" 
print(f"EXISTING_RP_UUID:{EXISTING_RP_UUID}")

client_input = {
    "name": "Kakaomame Behavior",
    "description": "Custom Mob and Item Behaviors",
    "pack_type": "BP"
}

final_bp_manifest = generate_full_manifest(client_input, rp_uuid=EXISTING_RP_UUID)
print(f"final_bp_manifest:{json.dumps(final_bp_manifest, indent=2, ensure_ascii=False)}")
